// controller.js
let products = []; // danh s√°ch s·∫£n ph·∫©m
let cart = []; // gi·ªè h√†ng

// Key ƒë·ªÉ l∆∞u gi·ªè h√†ng trong localStorage
const CART_STORAGE_KEY = "phoneShop_cart";

// H√†m l∆∞u gi·ªè h√†ng v√†o localStorage
function saveCartToStorage() {
  try {
    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
    console.log("ƒê√£ l∆∞u gi·ªè h√†ng v√†o localStorage");

    // Hi·ªÉn th·ªã th√¥ng b√°o ng·∫Øn (optional)
    showNotification("Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t !!!", "success");
  } catch (error) {
    console.error("L·ªói khi l∆∞u gi·ªè h√†ng:", error);
  }
}

// H√†m hi·ªÉn th·ªã th√¥ng b√°o t·ªïng qu√°t
function showNotification(message, type = "success") {
  // ƒê·ªãnh nghƒ©a m√†u s·∫Øc theo lo·∫°i th√¥ng b√°o
  const colors = {
    success: "#28a745",
    warning: "#ffc107",
    error: "#dc3545",
    info: "#17a2b8",
  };

  // T·∫°o th√¥ng b√°o
  const notification = document.createElement("div");
  notification.innerHTML = message.replace(/\n/g, "<br>");
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${colors[type] || colors.success};
    color: ${type === "warning" ? "#000" : "#fff"};
    padding: 12px 18px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s;
    max-width: 350px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  `;

  document.body.appendChild(notification);

  // Hi·ªÉn th·ªã v√† t·ª± ƒë·ªông ·∫©n
  setTimeout(() => (notification.style.opacity = "1"), 100);
  const hideDelay =
    type === "success" && message.includes("THANH TO√ÅN") ? 4000 : 2500;
  setTimeout(() => {
    notification.style.opacity = "0";
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 300);
  }, hideDelay);
}

// H√†m t·∫£i gi·ªè h√†ng t·ª´ localStorage
function loadCartFromStorage() {
  try {
    const storedCart = localStorage.getItem(CART_STORAGE_KEY);
    if (storedCart) {
      const parsedCart = JSON.parse(storedCart);
      // Kh√¥i ph·ª•c l·∫°i ƒë·ªëi t∆∞·ª£ng CartItem v·ªõi Product instances
      cart = parsedCart.map((item) => {
        const product = new Product(item.product);
        return new CartItem(product, item.quantity);
      });
      console.log("ƒê√£ t·∫£i gi·ªè h√†ng t·ª´ localStorage:", cart.length, "s·∫£n ph·∫©m");
    }
  } catch (error) {
    console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", error);
    cart = []; // Reset gi·ªè h√†ng n·∫øu c√≥ l·ªói
  }
}

async function init() {
  products = await ProductService.getAllProducts();
  products = products.map((p) => new Product(p));

  // T·∫£i gi·ªè h√†ng t·ª´ localStorage
  loadCartFromStorage();

  renderProducts(products);
  renderCart(); // Hi·ªÉn th·ªã gi·ªè h√†ng ƒë√£ l∆∞u
  updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ban ƒë·∫ßu

  // g·∫Øn s·ª± ki·ªán cho dropdown filter
  const filterSelect = document.getElementById("filter");
  filterSelect.addEventListener("change", handleFilterChange);
}

// render s·∫£n ph·∫©m ra m√†n h√¨nh
function renderProducts(list) {
  const container = document.getElementById("product-list");
  container.innerHTML = "";

  list.forEach((p) => {
    const productCard = document.createElement("div");
    productCard.className = "product-card";
    productCard.innerHTML = `
      <img src="${p.img}" alt="${p.name}" class="product-image">
      <div class="product-info">
        <div class="product-name">${p.name}</div>
        <div class="product-type">${p.type}</div>
        <div class="product-price">${p.price}$</div>
        <div class="product-desc">${p.desc}</div>
        <button class="add-to-cart-btn" onclick="addToCart('${p.id}')">
          üõí Th√™m v√†o gi·ªè
        </button>
      </div>
    `;
    container.appendChild(productCard);
  });
}

// render gi·ªè h√†ng
function renderCart() {
  const cartList = document.getElementById("cart-list");
  const cartTable = document.getElementById("cart-table");
  const cartActions = document.getElementById("cart-actions");
  const emptyCart = document.getElementById("empty-cart");
  const totalAmountElement = document.getElementById("total-amount");

  // X√≥a n·ªôi dung c≈©
  cartList.innerHTML = "";

  if (cart.length === 0) {
    // Hi·ªÉn th·ªã th√¥ng b√°o gi·ªè h√†ng tr·ªëng
    cartTable.style.display = "none";
    cartActions.style.display = "none";
    emptyCart.style.display = "block";
    return;
  }

  // ·∫®n th√¥ng b√°o tr·ªëng, hi·ªÉn th·ªã b·∫£ng v√† n√∫t actions
  emptyCart.style.display = "none";
  cartTable.style.display = "table";
  cartActions.style.display = "block";

  let totalAmount = 0;

  // Duy·ªát m·∫£ng gi·ªè h√†ng v√† t·∫°o tr cho m·ªói s·∫£n ph·∫©m
  cart.forEach((item) => {
    const itemTotal = item.product.price * item.quantity;
    totalAmount += itemTotal;

    // T·∫°o th·∫ª tr cho m·ªói s·∫£n ph·∫©m
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td style="text-align: center;">
        <img src="${item.product.img}" alt="${item.product.name}" width="60" style="border-radius: 5px;">
      </td>
      <td><strong>${item.product.name}</strong></td>
      <td>${item.product.price}$</td>
      <td style="text-align: center;">
        <div class="quantity-controls">
          <button class="btn btn-sm btn-danger" onclick="decreaseQuantity('${item.product.id}')">-</button>
          <span>${item.quantity}</span>
          <button class="btn btn-sm btn-success" onclick="increaseQuantity('${item.product.id}')">+</button>
        </div>
      </td>
      <td style="text-align: right;"><strong>${itemTotal}$</strong></td>
      <td style="text-align: center;">
        <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart('${item.product.id}')" title="X√≥a s·∫£n ph·∫©m">
          üóëÔ∏è
        </button>
      </td>
    `;

    cartList.appendChild(tr);
  });

  // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
  totalAmountElement.textContent = `${totalAmount}$`;

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n n√∫t gi·ªè h√†ng
  updateCartCount();
}

// x·ª≠ l√Ω th√™m v√†o gi·ªè h√†ng
function addToCart(productId) {
  // T√¨m s·∫£n ph·∫©m theo ID
  const product = products.find((p) => p.id === productId);
  if (!product) {
    console.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID:", productId);
    return;
  }

  // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
  const existingItem = cart.find((c) => c.product.id === productId);

  if (existingItem) {
    // N·∫øu ƒë√£ c√≥ trong gi·ªè h√†ng, kh√¥ng push n·ªØa m√† ch·ªâ tƒÉng quantity l√™n 1 ƒë∆°n v·ªã
    existingItem.quantity += 1;
    console.log(`TƒÉng s·ªë l∆∞·ª£ng "${product.name}" l√™n ${existingItem.quantity}`);
  } else {
    // N·∫øu ch∆∞a c√≥ trong gi·ªè h√†ng, t·∫°o CartItem m·ªõi v·ªõi quantity = 1 v√† push v√†o cart
    const newCartItem = new CartItem(product, 1);
    cart.push(newCartItem);
    console.log(`Th√™m s·∫£n ph·∫©m m·ªõi "${product.name}" v√†o gi·ªè h√†ng`);
  }

  // C·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng
  renderCart();

  // L∆∞u gi·ªè h√†ng v√†o localStorage
  saveCartToStorage();
}

// h√†m tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
function increaseQuantity(productId) {
  // T√¨m s·∫£n ph·∫©m trong m·∫£ng gi·ªè h√†ng theo ID
  const cartItem = cart.find((item) => item.product.id === productId);

  if (cartItem) {
    // TƒÉng quantity l√™n 1 ƒë∆°n v·ªã
    cartItem.quantity += 1;
    console.log(
      `TƒÉng s·ªë l∆∞·ª£ng "${cartItem.product.name}" l√™n ${cartItem.quantity}`
    );

    // Render l·∫°i giao di·ªán
    renderCart();

    // L∆∞u gi·ªè h√†ng v√†o localStorage
    saveCartToStorage();
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng v·ªõi ID:", productId);
  }
}

// h√†m gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
function decreaseQuantity(productId) {
  // T√¨m s·∫£n ph·∫©m trong m·∫£ng gi·ªè h√†ng theo ID
  const cartItem = cart.find((item) => item.product.id === productId);

  if (cartItem) {
    if (cartItem.quantity > 1) {
      // Gi·∫£m quantity xu·ªëng 1 ƒë∆°n v·ªã (n·∫øu > 1)
      cartItem.quantity -= 1;
      console.log(
        `Gi·∫£m s·ªë l∆∞·ª£ng "${cartItem.product.name}" xu·ªëng ${cartItem.quantity}`
      );
    } else {
      // N·∫øu quantity = 1, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      const index = cart.findIndex((item) => item.product.id === productId);
      if (index !== -1) {
        cart.splice(index, 1);
        console.log(`X√≥a "${cartItem.product.name}" kh·ªèi gi·ªè h√†ng`);
      }
    }

    // Render l·∫°i giao di·ªán
    renderCart();

    // L∆∞u gi·ªè h√†ng v√†o localStorage
    saveCartToStorage();
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng v·ªõi ID:", productId);
  }
}

// h√†m x√≥a s·∫£n ph·∫©m ho√†n to√†n kh·ªèi gi·ªè h√†ng
function removeFromCart(productId) {
  // T√¨m v·ªã tr√≠ s·∫£n ph·∫©m trong m·∫£ng gi·ªè h√†ng
  const index = cart.findIndex((item) => item.product.id === productId);

  if (index !== -1) {
    const productName = cart[index].product.name;
    // X√≥a s·∫£n ph·∫©m kh·ªèi m·∫£ng cart
    cart.splice(index, 1);
    console.log(`ƒê√£ x√≥a "${productName}" kh·ªèi gi·ªè h√†ng`);

    // Render l·∫°i giao di·ªán
    renderCart();

    // L∆∞u gi·ªè h√†ng v√†o localStorage
    saveCartToStorage();
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng v·ªõi ID:", productId);
  }
}

// h√†m thanh to√°n
function checkout() {
  if (cart.length === 0) {
    showNotification(
      "Gi·ªè h√†ng tr·ªëng! Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.",
      "warning"
    );
    return;
  }

  // T√≠nh t·ªïng ti·ªÅn
  const totalAmount = cart.reduce((total, item) => {
    return total + item.product.price * item.quantity;
  }, 0);

  // T·∫°o th√¥ng tin ƒë∆°n h√†ng
  const orderInfo = cart
    .map(
      (item) =>
        `${item.product.name} x${item.quantity} = ${
          item.product.price * item.quantity
        }$`
    )
    .join("\n");

  // Hi·ªÉn th·ªã th√¥ng tin thanh to√°n
  const confirmMessage = `üõí TH√îNG TIN ƒê∆†N H√ÄNG:\n\n${orderInfo}\n\nüí∞ T·ªîNG C·ªòNG: ${totalAmount}$\n\nB·∫°n c√≥ mu·ªën thanh to√°n kh√¥ng?`;

  if (confirm(confirmMessage)) {
    // X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
    showNotification(
      `‚úÖ THANH TO√ÅN TH√ÄNH C√îNG!\n\nC·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!\nT·ªïng ti·ªÅn: ${totalAmount}$`,
      "success"
    );

    // Clear gi·ªè h√†ng v√† l∆∞u v√†o localStorage
    cart = [];
    renderCart();
    updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tr√™n n√∫t popup
    saveCartToStorage();

    console.log("Thanh to√°n th√†nh c√¥ng, ƒë√£ x√≥a gi·ªè h√†ng");
  } else {
    console.log("Ng∆∞·ªùi d√πng h·ªßy thanh to√°n");
  }
}

// h√†m x√≥a to√†n b·ªô gi·ªè h√†ng
function clearCart() {
  if (cart.length === 0) {
    showNotification("Gi·ªè h√†ng ƒë√£ tr·ªëng!", "info");
    return;
  }

  if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng kh√¥ng?")) {
    cart = [];
    renderCart();
    updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tr√™n n√∫t popup
    saveCartToStorage();
    showNotification("ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng!", "info");
    console.log("ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng");
  }
}

// h√†m toggle cart modal
function toggleCartModal() {
  const modal = document.getElementById("cart-modal");
  if (modal.classList.contains("show")) {
    // Th√™m class closing ƒë·ªÉ k√≠ch ho·∫°t animation ch√¨m xu·ªëng
    modal.classList.add("closing");

    setTimeout(() => {
      modal.style.display = "none";
      modal.classList.remove("show");
      modal.classList.remove("closing");
    }, 300);
  } else {
    modal.style.display = "flex";
    setTimeout(() => {
      modal.classList.add("show");
    }, 10);
  }
}

// h√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng (hi·ªÉn th·ªã tr√™n n√∫t)
function updateCartCount() {
  const cartCount = document.getElementById("cart-count");
  const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
  cartCount.textContent = totalItems;
}

// ƒë√≥ng modal khi click outside
window.onclick = function (event) {
  const modal = document.getElementById("cart-modal");
  if (event.target === modal) {
    toggleCartModal();
  }
};

// x·ª≠ l√Ω filter dropdown
function handleFilterChange(event) {
  const value = event.target.value;

  if (value === "all") {
    renderProducts(products);
  } else {
    const filtered = products.filter((p) => p.type === value);
    renderProducts(filtered);
  }
}

document.addEventListener("DOMContentLoaded", init);
